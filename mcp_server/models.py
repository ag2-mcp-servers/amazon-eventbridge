# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T11:27:50+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, SecretStr, conint, constr


class AccountId(RootModel[constr(pattern=r'\d{12}', min_length=12, max_length=12)]):
    root: constr(pattern=r'\d{12}', min_length=12, max_length=12)


class Action(
    RootModel[constr(pattern=r'events:[a-zA-Z]+', min_length=1, max_length=64)]
):
    root: constr(pattern=r'events:[a-zA-Z]+', min_length=1, max_length=64)


class ApiDestinationArn(
    RootModel[
        constr(
            pattern=r'^arn:aws([a-z]|\-)*:events:([a-z]|\d|\-)*:([0-9]{12})?:api-destination\/[\.\-_A-Za-z0-9]+\/[\-A-Za-z0-9]+$',
            min_length=1,
            max_length=1600,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws([a-z]|\-)*:events:([a-z]|\d|\-)*:([0-9]{12})?:api-destination\/[\.\-_A-Za-z0-9]+\/[\-A-Za-z0-9]+$',
        min_length=1,
        max_length=1600,
    )


class ApiDestinationDescription(RootModel[constr(pattern=r'.*', max_length=512)]):
    root: constr(pattern=r'.*', max_length=512)


class ApiDestinationHttpMethod(Enum):
    POST = 'POST'
    GET = 'GET'
    HEAD = 'HEAD'
    OPTIONS = 'OPTIONS'
    PUT = 'PUT'
    PATCH = 'PATCH'
    DELETE = 'DELETE'


class ApiDestinationInvocationRateLimitPerSecond(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class ApiDestinationName(
    RootModel[constr(pattern=r'[\.\-_A-Za-z0-9]+', min_length=1, max_length=64)]
):
    root: constr(pattern=r'[\.\-_A-Za-z0-9]+', min_length=1, max_length=64)


class ApiDestinationState(Enum):
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'


class ArchiveArn(
    RootModel[
        constr(
            pattern=r'^arn:aws([a-z]|\-)*:events:([a-z]|\d|\-)*:([0-9]{12})?:.+\/.+$',
            min_length=1,
            max_length=1600,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws([a-z]|\-)*:events:([a-z]|\d|\-)*:([0-9]{12})?:.+\/.+$',
        min_length=1,
        max_length=1600,
    )


class ArchiveDescription(RootModel[constr(pattern=r'.*', max_length=512)]):
    root: constr(pattern=r'.*', max_length=512)


class ArchiveName(
    RootModel[constr(pattern=r'[\.\-_A-Za-z0-9]+', min_length=1, max_length=48)]
):
    root: constr(pattern=r'[\.\-_A-Za-z0-9]+', min_length=1, max_length=48)


class ArchiveState(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'
    CREATING = 'CREATING'
    UPDATING = 'UPDATING'
    CREATE_FAILED = 'CREATE_FAILED'
    UPDATE_FAILED = 'UPDATE_FAILED'


class ArchiveStateReason(RootModel[constr(pattern=r'.*', max_length=512)]):
    root: constr(pattern=r'.*', max_length=512)


class Arn(RootModel[constr(min_length=1, max_length=1600)]):
    root: constr(min_length=1, max_length=1600)


class AssignPublicIp(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class AuthHeaderParameters(
    RootModel[
        constr(
            pattern=r'^[ \t]*[^\x00-\x1F:\x7F]+([ \t]+[^\x00-\x1F:\x7F]+)*[ \t]*$',
            min_length=1,
            max_length=512,
        )
    ]
):
    root: constr(
        pattern=r'^[ \t]*[^\x00-\x1F:\x7F]+([ \t]+[^\x00-\x1F:\x7F]+)*[ \t]*$',
        min_length=1,
        max_length=512,
    )


class Boolean(RootModel[bool]):
    root: bool


class CapacityProvider(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class CapacityProviderStrategyItemBase(RootModel[conint(ge=0, le=100000)]):
    root: conint(ge=0, le=100000)


class CapacityProviderStrategyItemWeight(RootModel[conint(ge=0, le=1000)]):
    root: conint(ge=0, le=1000)


class ConcurrentModificationException(RootModel[Any]):
    root: Any


class ConnectionApiKeyAuthResponseParameters(BaseModel):
    ApiKeyName: Optional[AuthHeaderParameters] = None


class ConnectionArn(
    RootModel[
        constr(
            pattern=r'^arn:aws([a-z]|\-)*:events:([a-z]|\d|\-)*:([0-9]{12})?:connection\/[\.\-_A-Za-z0-9]+\/[\-A-Za-z0-9]+$',
            min_length=1,
            max_length=1600,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws([a-z]|\-)*:events:([a-z]|\d|\-)*:([0-9]{12})?:connection\/[\.\-_A-Za-z0-9]+\/[\-A-Za-z0-9]+$',
        min_length=1,
        max_length=1600,
    )


class ConnectionAuthorizationType(Enum):
    BASIC = 'BASIC'
    OAUTH_CLIENT_CREDENTIALS = 'OAUTH_CLIENT_CREDENTIALS'
    API_KEY = 'API_KEY'


class ConnectionBasicAuthResponseParameters(BaseModel):
    Username: Optional[AuthHeaderParameters] = None


class ConnectionDescription(RootModel[constr(pattern=r'.*', max_length=512)]):
    root: constr(pattern=r'.*', max_length=512)


class ConnectionName(
    RootModel[constr(pattern=r'[\.\-_A-Za-z0-9]+', min_length=1, max_length=64)]
):
    root: constr(pattern=r'[\.\-_A-Za-z0-9]+', min_length=1, max_length=64)


class ConnectionOAuthClientResponseParameters(BaseModel):
    ClientID: Optional[AuthHeaderParameters] = None


class ConnectionOAuthHttpMethod(Enum):
    GET = 'GET'
    POST = 'POST'
    PUT = 'PUT'


class ConnectionState(Enum):
    CREATING = 'CREATING'
    UPDATING = 'UPDATING'
    DELETING = 'DELETING'
    AUTHORIZED = 'AUTHORIZED'
    DEAUTHORIZED = 'DEAUTHORIZED'
    AUTHORIZING = 'AUTHORIZING'
    DEAUTHORIZING = 'DEAUTHORIZING'


class ConnectionStateReason(RootModel[constr(pattern=r'.*', max_length=512)]):
    root: constr(pattern=r'.*', max_length=512)


class CreateConnectionApiKeyAuthRequestParameters(BaseModel):
    ApiKeyName: AuthHeaderParameters
    ApiKeyValue: AuthHeaderParameters


class CreateConnectionBasicAuthRequestParameters(BaseModel):
    Password: AuthHeaderParameters
    Username: AuthHeaderParameters


class CreateConnectionOAuthClientRequestParameters(BaseModel):
    ClientID: AuthHeaderParameters
    ClientSecret: AuthHeaderParameters


class CreatedBy(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class Database(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64) = Field(
        ..., description='Redshift Database'
    )


class DbUser(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128) = Field(
        ..., description='Database user name'
    )


class DeauthorizeConnectionRequest(BaseModel):
    Name: ConnectionName


class DeleteApiDestinationRequest(BaseModel):
    Name: ApiDestinationName


class DeleteApiDestinationResponse(BaseModel):
    pass


class DeleteArchiveRequest(BaseModel):
    ArchiveName_1: ArchiveName = Field(..., alias='ArchiveName')


class DeleteArchiveResponse(BaseModel):
    pass


class DeleteConnectionRequest(BaseModel):
    Name: ConnectionName


class DeleteEndpointResponse(BaseModel):
    pass


class DescribeApiDestinationRequest(BaseModel):
    Name: ApiDestinationName


class DescribeArchiveRequest(BaseModel):
    ArchiveName_1: ArchiveName = Field(..., alias='ArchiveName')


class DescribeConnectionRequest(BaseModel):
    Name: ConnectionName


class EndpointArn(
    RootModel[
        constr(
            pattern=r'^arn:aws([a-z]|\-)*:events:([a-z]|\d|\-)*:([0-9]{12})?:endpoint\/[/\.\-_A-Za-z0-9]+$',
            min_length=1,
            max_length=1600,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws([a-z]|\-)*:events:([a-z]|\d|\-)*:([0-9]{12})?:endpoint\/[/\.\-_A-Za-z0-9]+$',
        min_length=1,
        max_length=1600,
    )


class EndpointDescription(RootModel[constr(pattern=r'.*', max_length=512)]):
    root: constr(pattern=r'.*', max_length=512)


class EndpointId(
    RootModel[
        constr(
            pattern=r'^[A-Za-z0-9\-]+[\.][A-Za-z0-9\-]+$', min_length=1, max_length=50
        )
    ]
):
    root: constr(
        pattern=r'^[A-Za-z0-9\-]+[\.][A-Za-z0-9\-]+$', min_length=1, max_length=50
    )


class EndpointName(
    RootModel[constr(pattern=r'[\.\-_A-Za-z0-9]+', min_length=1, max_length=64)]
):
    root: constr(pattern=r'[\.\-_A-Za-z0-9]+', min_length=1, max_length=64)


class EndpointState(Enum):
    ACTIVE = 'ACTIVE'
    CREATING = 'CREATING'
    UPDATING = 'UPDATING'
    DELETING = 'DELETING'
    CREATE_FAILED = 'CREATE_FAILED'
    UPDATE_FAILED = 'UPDATE_FAILED'
    DELETE_FAILED = 'DELETE_FAILED'


class EndpointStateReason(
    RootModel[constr(pattern=r'.*', min_length=1, max_length=512)]
):
    root: constr(pattern=r'.*', min_length=1, max_length=512)


class EndpointUrl(
    RootModel[
        constr(pattern=r'^(https://)?[\.\-a-z0-9]+$', min_length=1, max_length=256)
    ]
):
    root: constr(pattern=r'^(https://)?[\.\-a-z0-9]+$', min_length=1, max_length=256)


class ErrorCode(RootModel[str]):
    root: str


class ErrorMessage(RootModel[str]):
    root: str


class EventBusName(
    RootModel[constr(pattern=r'[/\.\-_A-Za-z0-9]+', min_length=1, max_length=256)]
):
    root: constr(pattern=r'[/\.\-_A-Za-z0-9]+', min_length=1, max_length=256)


class EventBusNameOrArn(
    RootModel[
        constr(
            pattern=r'(arn:aws[\w-]*:events:[a-z]{2}-[a-z]+-[\w-]+:[0-9]{12}:event-bus\/)?[/\.\-_A-Za-z0-9]+',
            min_length=1,
            max_length=1600,
        )
    ]
):
    root: constr(
        pattern=r'(arn:aws[\w-]*:events:[a-z]{2}-[a-z]+-[\w-]+:[0-9]{12}:event-bus\/)?[/\.\-_A-Za-z0-9]+',
        min_length=1,
        max_length=1600,
    )


class EventId(RootModel[constr(max_length=64)]):
    root: constr(max_length=64)


class EventPattern(RootModel[constr(max_length=4096)]):
    root: constr(max_length=4096)


class EventResource(RootModel[constr(max_length=2048)]):
    root: constr(max_length=2048)


class EventResourceList(RootModel[List[EventResource]]):
    root: List[EventResource]


class EventSourceName(
    RootModel[
        constr(
            pattern=r'aws\.partner(/[\.\-_A-Za-z0-9]+){2,}',
            min_length=1,
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'aws\.partner(/[\.\-_A-Za-z0-9]+){2,}', min_length=1, max_length=256
    )


class EventSourceNamePrefix(
    RootModel[constr(pattern=r'[/\.\-_A-Za-z0-9]+', min_length=1, max_length=256)]
):
    root: constr(pattern=r'[/\.\-_A-Za-z0-9]+', min_length=1, max_length=256)


class EventSourceState(Enum):
    PENDING = 'PENDING'
    ACTIVE = 'ACTIVE'
    DELETED = 'DELETED'


class EventTime(RootModel[datetime]):
    root: datetime


class HeaderKey(
    RootModel[constr(pattern=r'^[!#$%&\'*+-.^_`|~0-9a-zA-Z]+$', max_length=512)]
):
    root: constr(pattern=r'^[!#$%&\'*+-.^_`|~0-9a-zA-Z]+$', max_length=512)


class HeaderValue(
    RootModel[
        constr(
            pattern=r'^[ \t]*[\x20-\x7E]+([ \t]+[\x20-\x7E]+)*[ \t]*$', max_length=512
        )
    ]
):
    root: constr(
        pattern=r'^[ \t]*[\x20-\x7E]+([ \t]+[\x20-\x7E]+)*[ \t]*$', max_length=512
    )


class HealthCheck(
    RootModel[
        constr(
            pattern=r'^arn:aws([a-z]|\-)*:route53:::healthcheck/[\-a-z0-9]+$',
            min_length=1,
            max_length=1600,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws([a-z]|\-)*:route53:::healthcheck/[\-a-z0-9]+$',
        min_length=1,
        max_length=1600,
    )


class HomeRegion(
    RootModel[constr(pattern=r'^[\-a-z0-9]+$', min_length=9, max_length=20)]
):
    root: constr(pattern=r'^[\-a-z0-9]+$', min_length=9, max_length=20)


class HttpsEndpoint(
    RootModel[
        constr(
            pattern=r'^((%[0-9A-Fa-f]{2}|[-()_.!~*\';/?:@\x26=+$,A-Za-z0-9])+)([).!\';/?:,])?$',
            min_length=1,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'^((%[0-9A-Fa-f]{2}|[-()_.!~*\';/?:@\x26=+$,A-Za-z0-9])+)([).!\';/?:,])?$',
        min_length=1,
        max_length=2048,
    )


class IamRoleArn(
    RootModel[
        constr(
            pattern=r'^arn:aws[a-z-]*:iam::\d{12}:role\/[\w+=,.@/-]+$',
            min_length=1,
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[a-z-]*:iam::\d{12}:role\/[\w+=,.@/-]+$',
        min_length=1,
        max_length=256,
    )


class IllegalStatusException(RootModel[Any]):
    root: Any


class InputTransformerPathKey(
    RootModel[constr(pattern=r'[A-Za-z0-9\_\-]+', min_length=1, max_length=256)]
):
    root: constr(pattern=r'[A-Za-z0-9\_\-]+', min_length=1, max_length=256)


class Integer(RootModel[int]):
    root: int


class InternalException(RootModel[Any]):
    root: Any


class InvalidEventPatternException(RootModel[Any]):
    root: Any


class InvalidStateException(RootModel[Any]):
    root: Any


class LaunchType(Enum):
    EC2 = 'EC2'
    FARGATE = 'FARGATE'
    EXTERNAL = 'EXTERNAL'


class LimitExceededException(RootModel[Any]):
    root: Any


class LimitMax100(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class LimitMin1(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class ListTagsForResourceRequest(BaseModel):
    ResourceARN: Arn


class Long(RootModel[int]):
    root: int


class ManagedBy(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class ManagedRuleException(RootModel[Any]):
    root: Any


class MaximumEventAgeInSeconds(RootModel[conint(ge=60, le=86400)]):
    root: conint(ge=60, le=86400)


class MaximumRetryAttempts(RootModel[conint(ge=0, le=185)]):
    root: conint(ge=0, le=185)


class MessageGroupId(RootModel[constr(max_length=100)]):
    root: constr(max_length=100)


class NextToken(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class NonPartnerEventBusArn(
    RootModel[
        constr(
            pattern=r'^arn:aws[a-z-]*:events:[a-z]{2}-[a-z-]+-\d+:\d{12}:event-bus/[\w.-]+$',
            min_length=1,
            max_length=512,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[a-z-]*:events:[a-z]{2}-[a-z-]+-\d+:\d{12}:event-bus/[\w.-]+$',
        min_length=1,
        max_length=512,
    )


class NonPartnerEventBusName(
    RootModel[constr(pattern=r'[\.\-_A-Za-z0-9]+', min_length=1, max_length=256)]
):
    root: constr(pattern=r'[\.\-_A-Za-z0-9]+', min_length=1, max_length=256)


class NonPartnerEventBusNameOrArn(
    RootModel[
        constr(
            pattern=r'(arn:aws[\w-]*:events:[a-z]{2}-[a-z]+-[\w-]+:[0-9]{12}:event-bus\/)?[\.\-_A-Za-z0-9]+',
            min_length=1,
            max_length=1600,
        )
    ]
):
    root: constr(
        pattern=r'(arn:aws[\w-]*:events:[a-z]{2}-[a-z]+-[\w-]+:[0-9]{12}:event-bus\/)?[\.\-_A-Za-z0-9]+',
        min_length=1,
        max_length=1600,
    )


class OperationDisabledException(RootModel[Any]):
    root: Any


class PartnerEventSourceNamePrefix(
    RootModel[
        constr(
            pattern=r'aws\.partner/[\.\-_A-Za-z0-9]+/[/\.\-_A-Za-z0-9]*',
            min_length=1,
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'aws\.partner/[\.\-_A-Za-z0-9]+/[/\.\-_A-Za-z0-9]*',
        min_length=1,
        max_length=256,
    )


class PathParameter(RootModel[constr(pattern=r'^(?!\s*$).+')]):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'^(?!\s*$).+')


class PathParameterList(RootModel[List[PathParameter]]):
    root: List[PathParameter]


class PlacementConstraintExpression(RootModel[constr(max_length=2000)]):
    root: constr(max_length=2000)


class PlacementConstraintType(Enum):
    distinctInstance = 'distinctInstance'
    memberOf = 'memberOf'


class PlacementStrategyField(RootModel[constr(max_length=255)]):
    root: constr(max_length=255)


class PlacementStrategyType(Enum):
    random = 'random'
    spread = 'spread'
    binpack = 'binpack'


class PolicyLengthExceededException(RootModel[Any]):
    root: Any


class Primary(BaseModel):
    HealthCheck_1: HealthCheck = Field(..., alias='HealthCheck')


class Principal(RootModel[constr(pattern=r'(\d{12}|\*)', min_length=1, max_length=12)]):
    root: constr(pattern=r'(\d{12}|\*)', min_length=1, max_length=12)


class PropagateTags(Enum):
    TASK_DEFINITION = 'TASK_DEFINITION'


class PutEventsResultEntry(BaseModel):
    ErrorCode_1: Optional[ErrorCode] = Field(None, alias='ErrorCode')
    ErrorMessage_1: Optional[ErrorMessage] = Field(None, alias='ErrorMessage')
    EventId_1: Optional[EventId] = Field(None, alias='EventId')


class PutEventsResultEntryList(RootModel[List[PutEventsResultEntry]]):
    root: List[PutEventsResultEntry]


class PutPartnerEventsResultEntry(BaseModel):
    ErrorCode_1: Optional[ErrorCode] = Field(None, alias='ErrorCode')
    ErrorMessage_1: Optional[ErrorMessage] = Field(None, alias='ErrorMessage')
    EventId_1: Optional[EventId] = Field(None, alias='EventId')


class PutPartnerEventsResultEntryList(RootModel[List[PutPartnerEventsResultEntry]]):
    root: List[PutPartnerEventsResultEntry]


class QueryStringKey(RootModel[constr(pattern=r'[^\x00-\x1F\x7F]+', max_length=512)]):
    root: constr(pattern=r'[^\x00-\x1F\x7F]+', max_length=512)


class QueryStringValue(
    RootModel[constr(pattern=r'[^\x00-\x09\x0B\x0C\x0E-\x1F\x7F]+', max_length=512)]
):
    root: constr(pattern=r'[^\x00-\x09\x0B\x0C\x0E-\x1F\x7F]+', max_length=512)


class RedshiftSecretManagerArn(
    RootModel[
        constr(
            pattern=r'(^arn:aws([a-z]|\-)*:secretsmanager:[a-z0-9-.]+:.*)|(\$(\.[\w_-]+(\[(\d+|\*)\])*)*)',
            min_length=1,
            max_length=1600,
        )
    ]
):
    root: constr(
        pattern=r'(^arn:aws([a-z]|\-)*:secretsmanager:[a-z0-9-.]+:.*)|(\$(\.[\w_-]+(\[(\d+|\*)\])*)*)',
        min_length=1,
        max_length=1600,
    ) = Field(
        ...,
        description='Optional SecretManager ARN which stores the database credentials',
    )


class ReferenceId(RootModel[constr(max_length=1024)]):
    root: constr(max_length=1024)


class ReplayArn(
    RootModel[
        constr(
            pattern=r'^arn:aws([a-z]|\-)*:events:([a-z]|\d|\-)*:([0-9]{12})?:.+\/[\.\-_A-Za-z0-9]+$',
            min_length=1,
            max_length=1600,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws([a-z]|\-)*:events:([a-z]|\d|\-)*:([0-9]{12})?:.+\/[\.\-_A-Za-z0-9]+$',
        min_length=1,
        max_length=1600,
    )


class ReplayDescription(RootModel[constr(pattern=r'.*', max_length=512)]):
    root: constr(pattern=r'.*', max_length=512)


class ReplayDestinationFilters(RootModel[List[Arn]]):
    root: List[Arn]


class ReplayName(
    RootModel[constr(pattern=r'[\.\-_A-Za-z0-9]+', min_length=1, max_length=64)]
):
    root: constr(pattern=r'[\.\-_A-Za-z0-9]+', min_length=1, max_length=64)


class ReplayState(Enum):
    STARTING = 'STARTING'
    RUNNING = 'RUNNING'
    CANCELLING = 'CANCELLING'
    COMPLETED = 'COMPLETED'
    CANCELLED = 'CANCELLED'
    FAILED = 'FAILED'


class ReplayStateReason(RootModel[constr(pattern=r'.*', max_length=512)]):
    root: constr(pattern=r'.*', max_length=512)


class ReplicationState(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class ResourceAlreadyExistsException(RootModel[Any]):
    root: Any


class ResourceArn(RootModel[constr(min_length=1, max_length=1600)]):
    root: constr(min_length=1, max_length=1600)


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class RetentionDays(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class RetryPolicy(BaseModel):
    MaximumEventAgeInSeconds_1: Optional[MaximumEventAgeInSeconds] = Field(
        None, alias='MaximumEventAgeInSeconds'
    )
    MaximumRetryAttempts_1: Optional[MaximumRetryAttempts] = Field(
        None, alias='MaximumRetryAttempts'
    )


class RoleArn(RootModel[constr(min_length=1, max_length=1600)]):
    root: constr(min_length=1, max_length=1600)


class Route(RootModel[constr(pattern=r'^[\-a-z0-9]+$', min_length=9, max_length=20)]):
    root: constr(pattern=r'^[\-a-z0-9]+$', min_length=9, max_length=20)


class RuleArn(RootModel[constr(min_length=1, max_length=1600)]):
    root: constr(min_length=1, max_length=1600)


class RuleDescription(RootModel[constr(max_length=512)]):
    root: constr(max_length=512)


class RuleName(
    RootModel[constr(pattern=r'[\.\-_A-Za-z0-9]+', min_length=1, max_length=64)]
):
    root: constr(pattern=r'[\.\-_A-Za-z0-9]+', min_length=1, max_length=64)


class RuleNameList(RootModel[List[RuleName]]):
    root: List[RuleName]


class RuleState(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class RunCommandTargetKey(
    RootModel[
        constr(pattern=r'^[\p{L}\p{Z}\p{N}_.:/=+\-@]*$', min_length=1, max_length=128)
    ]
):
    root: constr(pattern=r'^[\p{L}\p{Z}\p{N}_.:/=+\-@]*$', min_length=1, max_length=128)


class RunCommandTargetValue(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class RunCommandTargetValues(RootModel[List[RunCommandTargetValue]]):
    root: List[RunCommandTargetValue] = Field(..., max_length=50, min_length=1)


class SageMakerPipelineParameterName(
    RootModel[
        constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*$', min_length=1, max_length=256)
    ]
):
    root: constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*$', min_length=1, max_length=256)


class SageMakerPipelineParameterValue(RootModel[constr(max_length=1024)]):
    root: constr(max_length=1024)


class ScheduleExpression(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class Secondary(BaseModel):
    Route_1: Route = Field(..., alias='Route')


class SecretsManagerSecretArn(
    RootModel[
        constr(
            pattern=r'^arn:aws([a-z]|\-)*:secretsmanager:([a-z]|\d|\-)*:([0-9]{12})?:secret:[\/_+=\.@\-A-Za-z0-9]+$',
            min_length=20,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws([a-z]|\-)*:secretsmanager:([a-z]|\d|\-)*:([0-9]{12})?:secret:[\/_+=\.@\-A-Za-z0-9]+$',
        min_length=20,
        max_length=2048,
    )


class Sql(RootModel[SecretStr]):
    root: SecretStr = Field(..., description='A single Redshift SQL')


class Sqls(RootModel[List[Sql]]):
    root: List[Sql] = Field(
        ..., description='A list of SQLs.', max_length=40, min_length=0
    )


class SqsParameters(BaseModel):
    MessageGroupId_1: Optional[MessageGroupId] = Field(None, alias='MessageGroupId')


class StatementId(
    RootModel[constr(pattern=r'[a-zA-Z0-9-_]+', min_length=1, max_length=64)]
):
    root: constr(pattern=r'[a-zA-Z0-9-_]+', min_length=1, max_length=64)


class StatementName(RootModel[constr(min_length=1, max_length=500)]):
    root: constr(min_length=1, max_length=500) = Field(
        ...,
        description='A name for Redshift DataAPI statement which can be used as filter of ListStatement.',
    )


class String(RootModel[str]):
    root: str


class StringList(RootModel[List[String]]):
    root: List[String]


class TagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey]


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class TargetArn(RootModel[constr(min_length=1, max_length=1600)]):
    root: constr(min_length=1, max_length=1600)


class TargetId(
    RootModel[constr(pattern=r'[\.\-_A-Za-z0-9]+', min_length=1, max_length=64)]
):
    root: constr(pattern=r'[\.\-_A-Za-z0-9]+', min_length=1, max_length=64)


class TargetIdList(RootModel[List[TargetId]]):
    root: List[TargetId] = Field(..., max_length=100, min_length=1)


class TargetInput(RootModel[constr(max_length=8192)]):
    root: constr(max_length=8192)


class TargetInputPath(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class TargetPartitionKeyPath(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class TestEventPatternRequest(BaseModel):
    Event: String
    EventPattern_1: EventPattern = Field(..., alias='EventPattern')


class TestEventPatternResponse(BaseModel):
    Result: Optional[Boolean] = None


class Timestamp(RootModel[datetime]):
    root: datetime


class TraceHeader(RootModel[constr(min_length=1, max_length=500)]):
    root: constr(min_length=1, max_length=500)


class TransformerInput(RootModel[constr(min_length=1, max_length=8192)]):
    root: constr(min_length=1, max_length=8192)


class TransformerPaths(RootModel[Optional[Dict[str, TargetInputPath]]]):
    root: Optional[Dict[str, TargetInputPath]] = None


class UntagResourceRequest(BaseModel):
    ResourceARN: Arn
    TagKeys: TagKeyList


class UntagResourceResponse(BaseModel):
    pass


class UpdateApiDestinationRequest(BaseModel):
    ConnectionArn_1: Optional[ConnectionArn] = Field(None, alias='ConnectionArn')
    Description: Optional[ApiDestinationDescription] = None
    HttpMethod: Optional[ApiDestinationHttpMethod] = None
    InvocationEndpoint: Optional[HttpsEndpoint] = None
    InvocationRateLimitPerSecond: Optional[
        ApiDestinationInvocationRateLimitPerSecond
    ] = None
    Name: ApiDestinationName


class UpdateApiDestinationResponse(BaseModel):
    ApiDestinationArn_1: Optional[ApiDestinationArn] = Field(
        None, alias='ApiDestinationArn'
    )
    ApiDestinationState_1: Optional[ApiDestinationState] = Field(
        None, alias='ApiDestinationState'
    )
    CreationTime: Optional[Timestamp] = None
    LastModifiedTime: Optional[Timestamp] = None


class UpdateArchiveRequest(BaseModel):
    ArchiveName_1: ArchiveName = Field(..., alias='ArchiveName')
    Description: Optional[ArchiveDescription] = None
    EventPattern_1: Optional[EventPattern] = Field(None, alias='EventPattern')
    RetentionDays_1: Optional[RetentionDays] = Field(None, alias='RetentionDays')


class UpdateArchiveResponse(BaseModel):
    ArchiveArn_1: Optional[ArchiveArn] = Field(None, alias='ArchiveArn')
    CreationTime: Optional[Timestamp] = None
    State: Optional[ArchiveState] = None
    StateReason: Optional[ArchiveStateReason] = None


class UpdateConnectionApiKeyAuthRequestParameters(BaseModel):
    ApiKeyName: Optional[AuthHeaderParameters] = None
    ApiKeyValue: Optional[AuthHeaderParameters] = None


class UpdateConnectionBasicAuthRequestParameters(BaseModel):
    Password: Optional[AuthHeaderParameters] = None
    Username: Optional[AuthHeaderParameters] = None


class UpdateConnectionOAuthClientRequestParameters(BaseModel):
    ClientID: Optional[AuthHeaderParameters] = None
    ClientSecret: Optional[AuthHeaderParameters] = None


class UpdateConnectionResponse(BaseModel):
    ConnectionArn_1: Optional[ConnectionArn] = Field(None, alias='ConnectionArn')
    ConnectionState_1: Optional[ConnectionState] = Field(None, alias='ConnectionState')
    CreationTime: Optional[Timestamp] = None
    LastAuthorizedTime: Optional[Timestamp] = None
    LastModifiedTime: Optional[Timestamp] = None


class XAmzTarget(Enum):
    AWSEvents_ActivateEventSource = 'AWSEvents.ActivateEventSource'


class XAmzTarget1(Enum):
    AWSEvents_CancelReplay = 'AWSEvents.CancelReplay'


class XAmzTarget2(Enum):
    AWSEvents_CreateApiDestination = 'AWSEvents.CreateApiDestination'


class XAmzTarget3(Enum):
    AWSEvents_CreateArchive = 'AWSEvents.CreateArchive'


class XAmzTarget4(Enum):
    AWSEvents_CreateConnection = 'AWSEvents.CreateConnection'


class XAmzTarget5(Enum):
    AWSEvents_CreateEndpoint = 'AWSEvents.CreateEndpoint'


class XAmzTarget6(Enum):
    AWSEvents_CreateEventBus = 'AWSEvents.CreateEventBus'


class XAmzTarget7(Enum):
    AWSEvents_CreatePartnerEventSource = 'AWSEvents.CreatePartnerEventSource'


class XAmzTarget8(Enum):
    AWSEvents_DeactivateEventSource = 'AWSEvents.DeactivateEventSource'


class XAmzTarget9(Enum):
    AWSEvents_DeauthorizeConnection = 'AWSEvents.DeauthorizeConnection'


class XAmzTarget10(Enum):
    AWSEvents_DeleteApiDestination = 'AWSEvents.DeleteApiDestination'


class XAmzTarget11(Enum):
    AWSEvents_DeleteArchive = 'AWSEvents.DeleteArchive'


class XAmzTarget12(Enum):
    AWSEvents_DeleteConnection = 'AWSEvents.DeleteConnection'


class XAmzTarget13(Enum):
    AWSEvents_DeleteEndpoint = 'AWSEvents.DeleteEndpoint'


class XAmzTarget14(Enum):
    AWSEvents_DeleteEventBus = 'AWSEvents.DeleteEventBus'


class XAmzTarget15(Enum):
    AWSEvents_DeletePartnerEventSource = 'AWSEvents.DeletePartnerEventSource'


class XAmzTarget16(Enum):
    AWSEvents_DeleteRule = 'AWSEvents.DeleteRule'


class XAmzTarget17(Enum):
    AWSEvents_DescribeApiDestination = 'AWSEvents.DescribeApiDestination'


class XAmzTarget18(Enum):
    AWSEvents_DescribeArchive = 'AWSEvents.DescribeArchive'


class XAmzTarget19(Enum):
    AWSEvents_DescribeConnection = 'AWSEvents.DescribeConnection'


class XAmzTarget20(Enum):
    AWSEvents_DescribeEndpoint = 'AWSEvents.DescribeEndpoint'


class XAmzTarget21(Enum):
    AWSEvents_DescribeEventBus = 'AWSEvents.DescribeEventBus'


class XAmzTarget22(Enum):
    AWSEvents_DescribeEventSource = 'AWSEvents.DescribeEventSource'


class XAmzTarget23(Enum):
    AWSEvents_DescribePartnerEventSource = 'AWSEvents.DescribePartnerEventSource'


class XAmzTarget24(Enum):
    AWSEvents_DescribeReplay = 'AWSEvents.DescribeReplay'


class XAmzTarget25(Enum):
    AWSEvents_DescribeRule = 'AWSEvents.DescribeRule'


class XAmzTarget26(Enum):
    AWSEvents_DisableRule = 'AWSEvents.DisableRule'


class XAmzTarget27(Enum):
    AWSEvents_EnableRule = 'AWSEvents.EnableRule'


class XAmzTarget28(Enum):
    AWSEvents_ListApiDestinations = 'AWSEvents.ListApiDestinations'


class XAmzTarget29(Enum):
    AWSEvents_ListArchives = 'AWSEvents.ListArchives'


class XAmzTarget30(Enum):
    AWSEvents_ListConnections = 'AWSEvents.ListConnections'


class XAmzTarget31(Enum):
    AWSEvents_ListEndpoints = 'AWSEvents.ListEndpoints'


class XAmzTarget32(Enum):
    AWSEvents_ListEventBuses = 'AWSEvents.ListEventBuses'


class XAmzTarget33(Enum):
    AWSEvents_ListEventSources = 'AWSEvents.ListEventSources'


class XAmzTarget34(Enum):
    AWSEvents_ListPartnerEventSourceAccounts = (
        'AWSEvents.ListPartnerEventSourceAccounts'
    )


class XAmzTarget35(Enum):
    AWSEvents_ListPartnerEventSources = 'AWSEvents.ListPartnerEventSources'


class XAmzTarget36(Enum):
    AWSEvents_ListReplays = 'AWSEvents.ListReplays'


class XAmzTarget37(Enum):
    AWSEvents_ListRuleNamesByTarget = 'AWSEvents.ListRuleNamesByTarget'


class XAmzTarget38(Enum):
    AWSEvents_ListRules = 'AWSEvents.ListRules'


class XAmzTarget39(Enum):
    AWSEvents_ListTagsForResource = 'AWSEvents.ListTagsForResource'


class XAmzTarget40(Enum):
    AWSEvents_ListTargetsByRule = 'AWSEvents.ListTargetsByRule'


class XAmzTarget41(Enum):
    AWSEvents_PutEvents = 'AWSEvents.PutEvents'


class XAmzTarget42(Enum):
    AWSEvents_PutPartnerEvents = 'AWSEvents.PutPartnerEvents'


class XAmzTarget43(Enum):
    AWSEvents_PutPermission = 'AWSEvents.PutPermission'


class XAmzTarget44(Enum):
    AWSEvents_PutRule = 'AWSEvents.PutRule'


class XAmzTarget45(Enum):
    AWSEvents_PutTargets = 'AWSEvents.PutTargets'


class XAmzTarget46(Enum):
    AWSEvents_RemovePermission = 'AWSEvents.RemovePermission'


class XAmzTarget47(Enum):
    AWSEvents_RemoveTargets = 'AWSEvents.RemoveTargets'


class XAmzTarget48(Enum):
    AWSEvents_StartReplay = 'AWSEvents.StartReplay'


class XAmzTarget49(Enum):
    AWSEvents_TagResource = 'AWSEvents.TagResource'


class XAmzTarget50(Enum):
    AWSEvents_TestEventPattern = 'AWSEvents.TestEventPattern'


class XAmzTarget51(Enum):
    AWSEvents_UntagResource = 'AWSEvents.UntagResource'


class XAmzTarget52(Enum):
    AWSEvents_UpdateApiDestination = 'AWSEvents.UpdateApiDestination'


class XAmzTarget53(Enum):
    AWSEvents_UpdateArchive = 'AWSEvents.UpdateArchive'


class XAmzTarget54(Enum):
    AWSEvents_UpdateConnection = 'AWSEvents.UpdateConnection'


class XAmzTarget55(Enum):
    AWSEvents_UpdateEndpoint = 'AWSEvents.UpdateEndpoint'


class ActivateEventSourceRequest(BaseModel):
    Name: EventSourceName


class ApiDestination(BaseModel):
    ApiDestinationArn_1: Optional[ApiDestinationArn] = Field(
        None, alias='ApiDestinationArn'
    )
    ApiDestinationState_1: Optional[ApiDestinationState] = Field(
        None, alias='ApiDestinationState'
    )
    ConnectionArn_1: Optional[ConnectionArn] = Field(None, alias='ConnectionArn')
    CreationTime: Optional[Timestamp] = None
    HttpMethod: Optional[ApiDestinationHttpMethod] = None
    InvocationEndpoint: Optional[HttpsEndpoint] = None
    InvocationRateLimitPerSecond: Optional[
        ApiDestinationInvocationRateLimitPerSecond
    ] = None
    LastModifiedTime: Optional[Timestamp] = None
    Name: Optional[ApiDestinationName] = None


class ApiDestinationResponseList(RootModel[List[ApiDestination]]):
    root: List[ApiDestination]


class Archive(BaseModel):
    ArchiveName_1: Optional[ArchiveName] = Field(None, alias='ArchiveName')
    CreationTime: Optional[Timestamp] = None
    EventCount: Optional[Long] = None
    EventSourceArn: Optional[Arn] = None
    RetentionDays_1: Optional[RetentionDays] = Field(None, alias='RetentionDays')
    SizeBytes: Optional[Long] = None
    State: Optional[ArchiveState] = None
    StateReason: Optional[ArchiveStateReason] = None


class ArchiveResponseList(RootModel[List[Archive]]):
    root: List[Archive]


class AwsVpcConfiguration(BaseModel):
    AssignPublicIp_1: Optional[AssignPublicIp] = Field(None, alias='AssignPublicIp')
    SecurityGroups: Optional[StringList] = None
    Subnets: StringList


class BatchArrayProperties(BaseModel):
    Size: Optional[Integer] = None


class BatchRetryStrategy(BaseModel):
    Attempts: Optional[Integer] = None


class CancelReplayRequest(BaseModel):
    ReplayName_1: ReplayName = Field(..., alias='ReplayName')


class CancelReplayResponse(BaseModel):
    ReplayArn_1: Optional[ReplayArn] = Field(None, alias='ReplayArn')
    State: Optional[ReplayState] = None
    StateReason: Optional[ReplayStateReason] = None


class CapacityProviderStrategyItem(BaseModel):
    base: Optional[CapacityProviderStrategyItemBase] = None
    capacityProvider: CapacityProvider
    weight: Optional[CapacityProviderStrategyItemWeight] = None


class Condition(BaseModel):
    Key: String
    Type: String
    Value: String


class Connection(BaseModel):
    AuthorizationType: Optional[ConnectionAuthorizationType] = None
    ConnectionArn_1: Optional[ConnectionArn] = Field(None, alias='ConnectionArn')
    ConnectionState_1: Optional[ConnectionState] = Field(None, alias='ConnectionState')
    CreationTime: Optional[Timestamp] = None
    LastAuthorizedTime: Optional[Timestamp] = None
    LastModifiedTime: Optional[Timestamp] = None
    Name: Optional[ConnectionName] = None
    StateReason: Optional[ConnectionStateReason] = None


class ConnectionBodyParameter(BaseModel):
    IsValueSecret: Optional[Boolean] = None
    Key: Optional[String] = None
    Value: Optional[String] = None


class ConnectionBodyParametersList(RootModel[List[ConnectionBodyParameter]]):
    root: List[ConnectionBodyParameter] = Field(..., max_length=100, min_length=0)


class ConnectionHeaderParameter(BaseModel):
    IsValueSecret: Optional[Boolean] = None
    Key: Optional[HeaderKey] = None
    Value: Optional[HeaderValue] = None


class ConnectionHeaderParametersList(RootModel[List[ConnectionHeaderParameter]]):
    root: List[ConnectionHeaderParameter] = Field(..., max_length=100, min_length=0)


class ConnectionQueryStringParameter(BaseModel):
    IsValueSecret: Optional[Boolean] = None
    Key: Optional[QueryStringKey] = None
    Value: Optional[QueryStringValue] = None


class ConnectionQueryStringParametersList(
    RootModel[List[ConnectionQueryStringParameter]]
):
    root: List[ConnectionQueryStringParameter] = Field(
        ..., max_length=100, min_length=0
    )


class ConnectionResponseList(RootModel[List[Connection]]):
    root: List[Connection]


class CreateApiDestinationRequest(BaseModel):
    ConnectionArn_1: ConnectionArn = Field(..., alias='ConnectionArn')
    Description: Optional[ApiDestinationDescription] = None
    HttpMethod: ApiDestinationHttpMethod
    InvocationEndpoint: HttpsEndpoint
    InvocationRateLimitPerSecond: Optional[
        ApiDestinationInvocationRateLimitPerSecond
    ] = None
    Name: ApiDestinationName


class CreateApiDestinationResponse(BaseModel):
    ApiDestinationArn_1: Optional[ApiDestinationArn] = Field(
        None, alias='ApiDestinationArn'
    )
    ApiDestinationState_1: Optional[ApiDestinationState] = Field(
        None, alias='ApiDestinationState'
    )
    CreationTime: Optional[Timestamp] = None
    LastModifiedTime: Optional[Timestamp] = None


class CreateArchiveRequest(BaseModel):
    ArchiveName_1: ArchiveName = Field(..., alias='ArchiveName')
    Description: Optional[ArchiveDescription] = None
    EventPattern_1: Optional[EventPattern] = Field(None, alias='EventPattern')
    EventSourceArn: Arn
    RetentionDays_1: Optional[RetentionDays] = Field(None, alias='RetentionDays')


class CreateArchiveResponse(BaseModel):
    ArchiveArn_1: Optional[ArchiveArn] = Field(None, alias='ArchiveArn')
    CreationTime: Optional[Timestamp] = None
    State: Optional[ArchiveState] = None
    StateReason: Optional[ArchiveStateReason] = None


class CreateConnectionResponse(BaseModel):
    ConnectionArn_1: Optional[ConnectionArn] = Field(None, alias='ConnectionArn')
    ConnectionState_1: Optional[ConnectionState] = Field(None, alias='ConnectionState')
    CreationTime: Optional[Timestamp] = None
    LastModifiedTime: Optional[Timestamp] = None


class CreateEventBusResponse(BaseModel):
    EventBusArn: Optional[String] = None


class CreatePartnerEventSourceRequest(BaseModel):
    Account: AccountId
    Name: EventSourceName


class CreatePartnerEventSourceResponse(BaseModel):
    EventSourceArn: Optional[String] = None


class DeactivateEventSourceRequest(BaseModel):
    Name: EventSourceName


class DeadLetterConfig(BaseModel):
    Arn: Optional[ResourceArn] = None


class DeauthorizeConnectionResponse(BaseModel):
    ConnectionArn_1: Optional[ConnectionArn] = Field(None, alias='ConnectionArn')
    ConnectionState_1: Optional[ConnectionState] = Field(None, alias='ConnectionState')
    CreationTime: Optional[Timestamp] = None
    LastAuthorizedTime: Optional[Timestamp] = None
    LastModifiedTime: Optional[Timestamp] = None


class DeleteConnectionResponse(BaseModel):
    ConnectionArn_1: Optional[ConnectionArn] = Field(None, alias='ConnectionArn')
    ConnectionState_1: Optional[ConnectionState] = Field(None, alias='ConnectionState')
    CreationTime: Optional[Timestamp] = None
    LastAuthorizedTime: Optional[Timestamp] = None
    LastModifiedTime: Optional[Timestamp] = None


class DeleteEndpointRequest(BaseModel):
    Name: EndpointName


class DeleteEventBusRequest(BaseModel):
    Name: EventBusName


class DeletePartnerEventSourceRequest(BaseModel):
    Account: AccountId
    Name: EventSourceName


class DeleteRuleRequest(BaseModel):
    EventBusName: Optional[EventBusNameOrArn] = None
    Force: Optional[Boolean] = None
    Name: RuleName


class DescribeApiDestinationResponse(BaseModel):
    ApiDestinationArn_1: Optional[ApiDestinationArn] = Field(
        None, alias='ApiDestinationArn'
    )
    ApiDestinationState_1: Optional[ApiDestinationState] = Field(
        None, alias='ApiDestinationState'
    )
    ConnectionArn_1: Optional[ConnectionArn] = Field(None, alias='ConnectionArn')
    CreationTime: Optional[Timestamp] = None
    Description: Optional[ApiDestinationDescription] = None
    HttpMethod: Optional[ApiDestinationHttpMethod] = None
    InvocationEndpoint: Optional[HttpsEndpoint] = None
    InvocationRateLimitPerSecond: Optional[
        ApiDestinationInvocationRateLimitPerSecond
    ] = None
    LastModifiedTime: Optional[Timestamp] = None
    Name: Optional[ApiDestinationName] = None


class DescribeArchiveResponse(BaseModel):
    ArchiveArn_1: Optional[ArchiveArn] = Field(None, alias='ArchiveArn')
    ArchiveName_1: Optional[ArchiveName] = Field(None, alias='ArchiveName')
    CreationTime: Optional[Timestamp] = None
    Description: Optional[ArchiveDescription] = None
    EventCount: Optional[Long] = None
    EventPattern_1: Optional[EventPattern] = Field(None, alias='EventPattern')
    EventSourceArn: Optional[Arn] = None
    RetentionDays_1: Optional[RetentionDays] = Field(None, alias='RetentionDays')
    SizeBytes: Optional[Long] = None
    State: Optional[ArchiveState] = None
    StateReason: Optional[ArchiveStateReason] = None


class DescribeEndpointRequest(BaseModel):
    HomeRegion_1: Optional[HomeRegion] = Field(None, alias='HomeRegion')
    Name: EndpointName


class DescribeEventBusRequest(BaseModel):
    Name: Optional[EventBusNameOrArn] = None


class DescribeEventBusResponse(BaseModel):
    Arn: Optional[String] = None
    Name: Optional[String] = None
    Policy: Optional[String] = None


class DescribeEventSourceRequest(BaseModel):
    Name: EventSourceName


class DescribeEventSourceResponse(BaseModel):
    Arn: Optional[String] = None
    CreatedBy: Optional[String] = None
    CreationTime: Optional[Timestamp] = None
    ExpirationTime: Optional[Timestamp] = None
    Name: Optional[String] = None
    State: Optional[EventSourceState] = None


class DescribePartnerEventSourceRequest(BaseModel):
    Name: EventSourceName


class DescribePartnerEventSourceResponse(BaseModel):
    Arn: Optional[String] = None
    Name: Optional[String] = None


class DescribeReplayRequest(BaseModel):
    ReplayName_1: ReplayName = Field(..., alias='ReplayName')


class DescribeRuleRequest(BaseModel):
    EventBusName: Optional[EventBusNameOrArn] = None
    Name: RuleName


class DescribeRuleResponse(BaseModel):
    Arn: Optional[RuleArn] = None
    CreatedBy_1: Optional[CreatedBy] = Field(None, alias='CreatedBy')
    Description: Optional[RuleDescription] = None
    EventBusName_1: Optional[EventBusName] = Field(None, alias='EventBusName')
    EventPattern_1: Optional[EventPattern] = Field(None, alias='EventPattern')
    ManagedBy_1: Optional[ManagedBy] = Field(None, alias='ManagedBy')
    Name: Optional[RuleName] = None
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')
    ScheduleExpression_1: Optional[ScheduleExpression] = Field(
        None, alias='ScheduleExpression'
    )
    State: Optional[RuleState] = None


class DisableRuleRequest(BaseModel):
    EventBusName: Optional[EventBusNameOrArn] = None
    Name: RuleName


class EnableRuleRequest(BaseModel):
    EventBusName: Optional[EventBusNameOrArn] = None
    Name: RuleName


class EndpointEventBus(BaseModel):
    EventBusArn: NonPartnerEventBusArn


class EndpointEventBusList(RootModel[List[EndpointEventBus]]):
    root: List[EndpointEventBus] = Field(..., max_length=2, min_length=2)


class EventBus(BaseModel):
    Arn: Optional[String] = None
    Name: Optional[String] = None
    Policy: Optional[String] = None


class EventBusList(RootModel[List[EventBus]]):
    root: List[EventBus]


class EventSource(BaseModel):
    Arn: Optional[String] = None
    CreatedBy: Optional[String] = None
    CreationTime: Optional[Timestamp] = None
    ExpirationTime: Optional[Timestamp] = None
    Name: Optional[String] = None
    State: Optional[EventSourceState] = None


class EventSourceList(RootModel[List[EventSource]]):
    root: List[EventSource]


class FailoverConfig(BaseModel):
    Primary_1: Primary = Field(..., alias='Primary')
    Secondary_1: Secondary = Field(..., alias='Secondary')


class HeaderParametersMap(RootModel[Optional[Dict[str, HeaderValue]]]):
    root: Optional[Dict[str, HeaderValue]] = None


class InputTransformer(BaseModel):
    InputPathsMap: Optional[TransformerPaths] = None
    InputTemplate: TransformerInput


class KinesisParameters(BaseModel):
    PartitionKeyPath: TargetPartitionKeyPath


class ListApiDestinationsRequest(BaseModel):
    ConnectionArn_1: Optional[ConnectionArn] = Field(None, alias='ConnectionArn')
    Limit: Optional[LimitMax100] = None
    NamePrefix: Optional[ApiDestinationName] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListApiDestinationsResponse(BaseModel):
    ApiDestinations: Optional[ApiDestinationResponseList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListArchivesRequest(BaseModel):
    EventSourceArn: Optional[Arn] = None
    Limit: Optional[LimitMax100] = None
    NamePrefix: Optional[ArchiveName] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    State: Optional[ArchiveState] = None


class ListArchivesResponse(BaseModel):
    Archives: Optional[ArchiveResponseList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListConnectionsRequest(BaseModel):
    ConnectionState_1: Optional[ConnectionState] = Field(None, alias='ConnectionState')
    Limit: Optional[LimitMax100] = None
    NamePrefix: Optional[ConnectionName] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListConnectionsResponse(BaseModel):
    Connections: Optional[ConnectionResponseList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListEndpointsRequest(BaseModel):
    HomeRegion_1: Optional[HomeRegion] = Field(None, alias='HomeRegion')
    MaxResults: Optional[LimitMax100] = None
    NamePrefix: Optional[EndpointName] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListEventBusesRequest(BaseModel):
    Limit: Optional[LimitMax100] = None
    NamePrefix: Optional[EventBusName] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListEventBusesResponse(BaseModel):
    EventBuses: Optional[EventBusList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListEventSourcesRequest(BaseModel):
    Limit: Optional[LimitMax100] = None
    NamePrefix: Optional[EventSourceNamePrefix] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListEventSourcesResponse(BaseModel):
    EventSources: Optional[EventSourceList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListPartnerEventSourceAccountsRequest(BaseModel):
    EventSourceName_1: EventSourceName = Field(..., alias='EventSourceName')
    Limit: Optional[LimitMax100] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListPartnerEventSourcesRequest(BaseModel):
    Limit: Optional[LimitMax100] = None
    NamePrefix: PartnerEventSourceNamePrefix
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListReplaysRequest(BaseModel):
    EventSourceArn: Optional[Arn] = None
    Limit: Optional[LimitMax100] = None
    NamePrefix: Optional[ReplayName] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    State: Optional[ReplayState] = None


class ListRuleNamesByTargetRequest(BaseModel):
    EventBusName: Optional[EventBusNameOrArn] = None
    Limit: Optional[LimitMax100] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    TargetArn_1: TargetArn = Field(..., alias='TargetArn')


class ListRuleNamesByTargetResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    RuleNames: Optional[RuleNameList] = None


class ListRulesRequest(BaseModel):
    EventBusName: Optional[EventBusNameOrArn] = None
    Limit: Optional[LimitMax100] = None
    NamePrefix: Optional[RuleName] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListTargetsByRuleRequest(BaseModel):
    EventBusName: Optional[EventBusNameOrArn] = None
    Limit: Optional[LimitMax100] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Rule: RuleName


class NetworkConfiguration(BaseModel):
    awsvpcConfiguration: Optional[AwsVpcConfiguration] = None


class PartnerEventSource(BaseModel):
    Arn: Optional[String] = None
    Name: Optional[String] = None


class PartnerEventSourceAccount(BaseModel):
    Account: Optional[AccountId] = None
    CreationTime: Optional[Timestamp] = None
    ExpirationTime: Optional[Timestamp] = None
    State: Optional[EventSourceState] = None


class PartnerEventSourceAccountList(RootModel[List[PartnerEventSourceAccount]]):
    root: List[PartnerEventSourceAccount]


class PartnerEventSourceList(RootModel[List[PartnerEventSource]]):
    root: List[PartnerEventSource]


class PlacementConstraint(BaseModel):
    expression: Optional[PlacementConstraintExpression] = None
    type: Optional[PlacementConstraintType] = None


class PlacementConstraints(RootModel[List[PlacementConstraint]]):
    root: List[PlacementConstraint] = Field(..., max_length=10)


class PlacementStrategy(BaseModel):
    field: Optional[PlacementStrategyField] = None
    type: Optional[PlacementStrategyType] = None


class PutEventsRequestEntry(BaseModel):
    Detail: Optional[String] = None
    DetailType: Optional[String] = None
    EventBusName: Optional[NonPartnerEventBusNameOrArn] = None
    Resources: Optional[EventResourceList] = None
    Source: Optional[String] = None
    Time: Optional[EventTime] = None
    TraceHeader_1: Optional[TraceHeader] = Field(None, alias='TraceHeader')


class PutEventsRequestEntryList(RootModel[List[PutEventsRequestEntry]]):
    root: List[PutEventsRequestEntry] = Field(..., max_length=10, min_length=1)


class PutEventsResponse(BaseModel):
    Entries: Optional[PutEventsResultEntryList] = None
    FailedEntryCount: Optional[Integer] = None


class PutPartnerEventsRequestEntry(BaseModel):
    Detail: Optional[String] = None
    DetailType: Optional[String] = None
    Resources: Optional[EventResourceList] = None
    Source: Optional[EventSourceName] = None
    Time: Optional[EventTime] = None


class PutPartnerEventsRequestEntryList(RootModel[List[PutPartnerEventsRequestEntry]]):
    root: List[PutPartnerEventsRequestEntry] = Field(..., max_length=20, min_length=1)


class PutPartnerEventsResponse(BaseModel):
    Entries: Optional[PutPartnerEventsResultEntryList] = None
    FailedEntryCount: Optional[Integer] = None


class PutPermissionRequest(BaseModel):
    Action_1: Optional[Action] = Field(None, alias='Action')
    Condition_1: Optional[Condition] = Field(None, alias='Condition')
    EventBusName: Optional[NonPartnerEventBusName] = None
    Policy: Optional[String] = None
    Principal_1: Optional[Principal] = Field(None, alias='Principal')
    StatementId_1: Optional[StatementId] = Field(None, alias='StatementId')


class PutRuleResponse(BaseModel):
    RuleArn_1: Optional[RuleArn] = Field(None, alias='RuleArn')


class PutTargetsResultEntry(BaseModel):
    ErrorCode_1: Optional[ErrorCode] = Field(None, alias='ErrorCode')
    ErrorMessage_1: Optional[ErrorMessage] = Field(None, alias='ErrorMessage')
    TargetId_1: Optional[TargetId] = Field(None, alias='TargetId')


class PutTargetsResultEntryList(RootModel[List[PutTargetsResultEntry]]):
    root: List[PutTargetsResultEntry]


class QueryStringParametersMap(RootModel[Optional[Dict[str, QueryStringValue]]]):
    root: Optional[Dict[str, QueryStringValue]] = None


class RedshiftDataParameters(BaseModel):
    Database_1: Database = Field(..., alias='Database')
    DbUser_1: Optional[DbUser] = Field(None, alias='DbUser')
    SecretManagerArn: Optional[RedshiftSecretManagerArn] = None
    Sql_1: Optional[Sql] = Field(None, alias='Sql')
    Sqls_1: Optional[Sqls] = Field(None, alias='Sqls')
    StatementName_1: Optional[StatementName] = Field(None, alias='StatementName')
    WithEvent: Optional[Boolean] = None


class RemovePermissionRequest(BaseModel):
    EventBusName: Optional[NonPartnerEventBusName] = None
    RemoveAllPermissions: Optional[Boolean] = None
    StatementId_1: Optional[StatementId] = Field(None, alias='StatementId')


class RemoveTargetsRequest(BaseModel):
    EventBusName: Optional[EventBusNameOrArn] = None
    Force: Optional[Boolean] = None
    Ids: TargetIdList
    Rule: RuleName


class RemoveTargetsResultEntry(BaseModel):
    ErrorCode_1: Optional[ErrorCode] = Field(None, alias='ErrorCode')
    ErrorMessage_1: Optional[ErrorMessage] = Field(None, alias='ErrorMessage')
    TargetId_1: Optional[TargetId] = Field(None, alias='TargetId')


class RemoveTargetsResultEntryList(RootModel[List[RemoveTargetsResultEntry]]):
    root: List[RemoveTargetsResultEntry]


class Replay(BaseModel):
    EventEndTime: Optional[Timestamp] = None
    EventLastReplayedTime: Optional[Timestamp] = None
    EventSourceArn: Optional[Arn] = None
    EventStartTime: Optional[Timestamp] = None
    ReplayEndTime: Optional[Timestamp] = None
    ReplayName_1: Optional[ReplayName] = Field(None, alias='ReplayName')
    ReplayStartTime: Optional[Timestamp] = None
    State: Optional[ReplayState] = None
    StateReason: Optional[ReplayStateReason] = None


class ReplayDestination(BaseModel):
    Arn_1: Arn = Field(..., alias='Arn')
    FilterArns: Optional[ReplayDestinationFilters] = None


class ReplayList(RootModel[List[Replay]]):
    root: List[Replay]


class ReplicationConfig(BaseModel):
    State: Optional[ReplicationState] = None


class RoutingConfig(BaseModel):
    FailoverConfig_1: FailoverConfig = Field(..., alias='FailoverConfig')


class Rule(BaseModel):
    Arn: Optional[RuleArn] = None
    Description: Optional[RuleDescription] = None
    EventBusName_1: Optional[EventBusName] = Field(None, alias='EventBusName')
    EventPattern_1: Optional[EventPattern] = Field(None, alias='EventPattern')
    ManagedBy_1: Optional[ManagedBy] = Field(None, alias='ManagedBy')
    Name: Optional[RuleName] = None
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')
    ScheduleExpression_1: Optional[ScheduleExpression] = Field(
        None, alias='ScheduleExpression'
    )
    State: Optional[RuleState] = None


class RuleResponseList(RootModel[List[Rule]]):
    root: List[Rule]


class RunCommandTarget(BaseModel):
    Key: RunCommandTargetKey
    Values: RunCommandTargetValues


class RunCommandTargets(RootModel[List[RunCommandTarget]]):
    root: List[RunCommandTarget] = Field(..., max_length=5, min_length=1)


class SageMakerPipelineParameter(BaseModel):
    Name: SageMakerPipelineParameterName
    Value: SageMakerPipelineParameterValue


class SageMakerPipelineParameterList(RootModel[List[SageMakerPipelineParameter]]):
    root: List[SageMakerPipelineParameter] = Field(..., max_length=200, min_length=0)


class SageMakerPipelineParameters(BaseModel):
    PipelineParameterList: Optional[SageMakerPipelineParameterList] = None


class StartReplayRequest(BaseModel):
    Description: Optional[ReplayDescription] = None
    Destination: ReplayDestination
    EventEndTime: Timestamp
    EventSourceArn: Arn
    EventStartTime: Timestamp
    ReplayName_1: ReplayName = Field(..., alias='ReplayName')


class StartReplayResponse(BaseModel):
    ReplayArn_1: Optional[ReplayArn] = Field(None, alias='ReplayArn')
    ReplayStartTime: Optional[Timestamp] = None
    State: Optional[ReplayState] = None
    StateReason: Optional[ReplayStateReason] = None


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class TagList(RootModel[List[Tag]]):
    root: List[Tag]


class TagResourceRequest(BaseModel):
    ResourceARN: Arn
    Tags: TagList


class UpdateEndpointRequest(BaseModel):
    Description: Optional[EndpointDescription] = None
    EventBuses: Optional[EndpointEventBusList] = None
    Name: EndpointName
    ReplicationConfig_1: Optional[ReplicationConfig] = Field(
        None, alias='ReplicationConfig'
    )
    RoleArn: Optional[IamRoleArn] = None
    RoutingConfig_1: Optional[RoutingConfig] = Field(None, alias='RoutingConfig')


class UpdateEndpointResponse(BaseModel):
    Arn: Optional[EndpointArn] = None
    EndpointId_1: Optional[EndpointId] = Field(None, alias='EndpointId')
    EndpointUrl_1: Optional[EndpointUrl] = Field(None, alias='EndpointUrl')
    EventBuses: Optional[EndpointEventBusList] = None
    Name: Optional[EndpointName] = None
    ReplicationConfig_1: Optional[ReplicationConfig] = Field(
        None, alias='ReplicationConfig'
    )
    RoleArn: Optional[IamRoleArn] = None
    RoutingConfig_1: Optional[RoutingConfig] = Field(None, alias='RoutingConfig')
    State: Optional[EndpointState] = None


class BatchParameters(BaseModel):
    ArrayProperties: Optional[BatchArrayProperties] = None
    JobDefinition: String
    JobName: String
    RetryStrategy: Optional[BatchRetryStrategy] = None


class CapacityProviderStrategy(RootModel[List[CapacityProviderStrategyItem]]):
    root: List[CapacityProviderStrategyItem] = Field(..., max_length=6)


class ConnectionHttpParameters(BaseModel):
    BodyParameters: Optional[ConnectionBodyParametersList] = None
    HeaderParameters: Optional[ConnectionHeaderParametersList] = None
    QueryStringParameters: Optional[ConnectionQueryStringParametersList] = None


class ConnectionOAuthResponseParameters(BaseModel):
    AuthorizationEndpoint: Optional[HttpsEndpoint] = None
    ClientParameters: Optional[ConnectionOAuthClientResponseParameters] = None
    HttpMethod: Optional[ConnectionOAuthHttpMethod] = None
    OAuthHttpParameters: Optional[ConnectionHttpParameters] = None


class CreateConnectionOAuthRequestParameters(BaseModel):
    AuthorizationEndpoint: HttpsEndpoint
    ClientParameters: CreateConnectionOAuthClientRequestParameters
    HttpMethod: ConnectionOAuthHttpMethod
    OAuthHttpParameters: Optional[ConnectionHttpParameters] = None


class CreateEndpointRequest(BaseModel):
    Description: Optional[EndpointDescription] = None
    EventBuses: EndpointEventBusList
    Name: EndpointName
    ReplicationConfig_1: Optional[ReplicationConfig] = Field(
        None, alias='ReplicationConfig'
    )
    RoleArn: Optional[IamRoleArn] = None
    RoutingConfig_1: RoutingConfig = Field(..., alias='RoutingConfig')


class CreateEndpointResponse(BaseModel):
    Arn: Optional[EndpointArn] = None
    EventBuses: Optional[EndpointEventBusList] = None
    Name: Optional[EndpointName] = None
    ReplicationConfig_1: Optional[ReplicationConfig] = Field(
        None, alias='ReplicationConfig'
    )
    RoleArn: Optional[IamRoleArn] = None
    RoutingConfig_1: Optional[RoutingConfig] = Field(None, alias='RoutingConfig')
    State: Optional[EndpointState] = None


class CreateEventBusRequest(BaseModel):
    EventSourceName_1: Optional[EventSourceName] = Field(None, alias='EventSourceName')
    Name: EventBusName
    Tags: Optional[TagList] = None


class DescribeEndpointResponse(BaseModel):
    Arn: Optional[EndpointArn] = None
    CreationTime: Optional[Timestamp] = None
    Description: Optional[EndpointDescription] = None
    EndpointId_1: Optional[EndpointId] = Field(None, alias='EndpointId')
    EndpointUrl_1: Optional[EndpointUrl] = Field(None, alias='EndpointUrl')
    EventBuses: Optional[EndpointEventBusList] = None
    LastModifiedTime: Optional[Timestamp] = None
    Name: Optional[EndpointName] = None
    ReplicationConfig_1: Optional[ReplicationConfig] = Field(
        None, alias='ReplicationConfig'
    )
    RoleArn: Optional[IamRoleArn] = None
    RoutingConfig_1: Optional[RoutingConfig] = Field(None, alias='RoutingConfig')
    State: Optional[EndpointState] = None
    StateReason: Optional[EndpointStateReason] = None


class DescribeReplayResponse(BaseModel):
    Description: Optional[ReplayDescription] = None
    Destination: Optional[ReplayDestination] = None
    EventEndTime: Optional[Timestamp] = None
    EventLastReplayedTime: Optional[Timestamp] = None
    EventSourceArn: Optional[Arn] = None
    EventStartTime: Optional[Timestamp] = None
    ReplayArn_1: Optional[ReplayArn] = Field(None, alias='ReplayArn')
    ReplayEndTime: Optional[Timestamp] = None
    ReplayName_1: Optional[ReplayName] = Field(None, alias='ReplayName')
    ReplayStartTime: Optional[Timestamp] = None
    State: Optional[ReplayState] = None
    StateReason: Optional[ReplayStateReason] = None


class Endpoint(BaseModel):
    Arn: Optional[EndpointArn] = None
    CreationTime: Optional[Timestamp] = None
    Description: Optional[EndpointDescription] = None
    EndpointId_1: Optional[EndpointId] = Field(None, alias='EndpointId')
    EndpointUrl_1: Optional[EndpointUrl] = Field(None, alias='EndpointUrl')
    EventBuses: Optional[EndpointEventBusList] = None
    LastModifiedTime: Optional[Timestamp] = None
    Name: Optional[EndpointName] = None
    ReplicationConfig_1: Optional[ReplicationConfig] = Field(
        None, alias='ReplicationConfig'
    )
    RoleArn: Optional[IamRoleArn] = None
    RoutingConfig_1: Optional[RoutingConfig] = Field(None, alias='RoutingConfig')
    State: Optional[EndpointState] = None
    StateReason: Optional[EndpointStateReason] = None


class EndpointList(RootModel[List[Endpoint]]):
    root: List[Endpoint]


class HttpParameters(BaseModel):
    HeaderParameters: Optional[HeaderParametersMap] = None
    PathParameterValues: Optional[PathParameterList] = None
    QueryStringParameters: Optional[QueryStringParametersMap] = None


class ListEndpointsResponse(BaseModel):
    Endpoints: Optional[EndpointList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListPartnerEventSourceAccountsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    PartnerEventSourceAccounts: Optional[PartnerEventSourceAccountList] = None


class ListPartnerEventSourcesResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    PartnerEventSources: Optional[PartnerEventSourceList] = None


class ListReplaysResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Replays: Optional[ReplayList] = None


class ListRulesResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Rules: Optional[RuleResponseList] = None


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[TagList] = None


class PlacementStrategies(RootModel[List[PlacementStrategy]]):
    root: List[PlacementStrategy] = Field(..., max_length=5)


class PutEventsRequest(BaseModel):
    EndpointId_1: Optional[EndpointId] = Field(None, alias='EndpointId')
    Entries: PutEventsRequestEntryList


class PutPartnerEventsRequest(BaseModel):
    Entries: PutPartnerEventsRequestEntryList


class PutRuleRequest(BaseModel):
    Description: Optional[RuleDescription] = None
    EventBusName: Optional[EventBusNameOrArn] = None
    EventPattern_1: Optional[EventPattern] = Field(None, alias='EventPattern')
    Name: RuleName
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')
    ScheduleExpression_1: Optional[ScheduleExpression] = Field(
        None, alias='ScheduleExpression'
    )
    State: Optional[RuleState] = None
    Tags: Optional[TagList] = None


class PutTargetsResponse(BaseModel):
    FailedEntries: Optional[PutTargetsResultEntryList] = None
    FailedEntryCount: Optional[Integer] = None


class RemoveTargetsResponse(BaseModel):
    FailedEntries: Optional[RemoveTargetsResultEntryList] = None
    FailedEntryCount: Optional[Integer] = None


class RunCommandParameters(BaseModel):
    RunCommandTargets_1: RunCommandTargets = Field(..., alias='RunCommandTargets')


class UpdateConnectionOAuthRequestParameters(BaseModel):
    AuthorizationEndpoint: Optional[HttpsEndpoint] = None
    ClientParameters: Optional[UpdateConnectionOAuthClientRequestParameters] = None
    HttpMethod: Optional[ConnectionOAuthHttpMethod] = None
    OAuthHttpParameters: Optional[ConnectionHttpParameters] = None


class ConnectionAuthResponseParameters(BaseModel):
    ApiKeyAuthParameters: Optional[ConnectionApiKeyAuthResponseParameters] = None
    BasicAuthParameters: Optional[ConnectionBasicAuthResponseParameters] = None
    InvocationHttpParameters: Optional[ConnectionHttpParameters] = None
    OAuthParameters: Optional[ConnectionOAuthResponseParameters] = None


class CreateConnectionAuthRequestParameters(BaseModel):
    ApiKeyAuthParameters: Optional[CreateConnectionApiKeyAuthRequestParameters] = None
    BasicAuthParameters: Optional[CreateConnectionBasicAuthRequestParameters] = None
    InvocationHttpParameters: Optional[ConnectionHttpParameters] = None
    OAuthParameters: Optional[CreateConnectionOAuthRequestParameters] = None


class CreateConnectionRequest(BaseModel):
    AuthParameters: CreateConnectionAuthRequestParameters
    AuthorizationType: ConnectionAuthorizationType
    Description: Optional[ConnectionDescription] = None
    Name: ConnectionName


class DescribeConnectionResponse(BaseModel):
    AuthParameters: Optional[ConnectionAuthResponseParameters] = None
    AuthorizationType: Optional[ConnectionAuthorizationType] = None
    ConnectionArn_1: Optional[ConnectionArn] = Field(None, alias='ConnectionArn')
    ConnectionState_1: Optional[ConnectionState] = Field(None, alias='ConnectionState')
    CreationTime: Optional[Timestamp] = None
    Description: Optional[ConnectionDescription] = None
    LastAuthorizedTime: Optional[Timestamp] = None
    LastModifiedTime: Optional[Timestamp] = None
    Name: Optional[ConnectionName] = None
    SecretArn: Optional[SecretsManagerSecretArn] = None
    StateReason: Optional[ConnectionStateReason] = None


class EcsParameters(BaseModel):
    CapacityProviderStrategy_1: Optional[CapacityProviderStrategy] = Field(
        None, alias='CapacityProviderStrategy'
    )
    EnableECSManagedTags: Optional[Boolean] = None
    EnableExecuteCommand: Optional[Boolean] = None
    Group: Optional[String] = None
    LaunchType_1: Optional[LaunchType] = Field(None, alias='LaunchType')
    NetworkConfiguration_1: Optional[NetworkConfiguration] = Field(
        None, alias='NetworkConfiguration'
    )
    PlacementConstraints_1: Optional[PlacementConstraints] = Field(
        None, alias='PlacementConstraints'
    )
    PlacementStrategy: Optional[PlacementStrategies] = None
    PlatformVersion: Optional[String] = None
    PropagateTags_1: Optional[PropagateTags] = Field(None, alias='PropagateTags')
    ReferenceId_1: Optional[ReferenceId] = Field(None, alias='ReferenceId')
    Tags: Optional[TagList] = None
    TaskCount: Optional[LimitMin1] = None
    TaskDefinitionArn: Arn


class Target(BaseModel):
    Arn: TargetArn
    BatchParameters_1: Optional[BatchParameters] = Field(None, alias='BatchParameters')
    DeadLetterConfig_1: Optional[DeadLetterConfig] = Field(
        None, alias='DeadLetterConfig'
    )
    EcsParameters_1: Optional[EcsParameters] = Field(None, alias='EcsParameters')
    HttpParameters_1: Optional[HttpParameters] = Field(None, alias='HttpParameters')
    Id: TargetId
    Input: Optional[TargetInput] = None
    InputPath: Optional[TargetInputPath] = None
    InputTransformer_1: Optional[InputTransformer] = Field(
        None, alias='InputTransformer'
    )
    KinesisParameters_1: Optional[KinesisParameters] = Field(
        None, alias='KinesisParameters'
    )
    RedshiftDataParameters_1: Optional[RedshiftDataParameters] = Field(
        None, alias='RedshiftDataParameters'
    )
    RetryPolicy_1: Optional[RetryPolicy] = Field(None, alias='RetryPolicy')
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')
    RunCommandParameters_1: Optional[RunCommandParameters] = Field(
        None, alias='RunCommandParameters'
    )
    SageMakerPipelineParameters_1: Optional[SageMakerPipelineParameters] = Field(
        None, alias='SageMakerPipelineParameters'
    )
    SqsParameters_1: Optional[SqsParameters] = Field(None, alias='SqsParameters')


class TargetList(RootModel[List[Target]]):
    root: List[Target] = Field(..., max_length=100, min_length=1)


class UpdateConnectionAuthRequestParameters(BaseModel):
    ApiKeyAuthParameters: Optional[UpdateConnectionApiKeyAuthRequestParameters] = None
    BasicAuthParameters: Optional[UpdateConnectionBasicAuthRequestParameters] = None
    InvocationHttpParameters: Optional[ConnectionHttpParameters] = None
    OAuthParameters: Optional[UpdateConnectionOAuthRequestParameters] = None


class UpdateConnectionRequest(BaseModel):
    AuthParameters: Optional[UpdateConnectionAuthRequestParameters] = None
    AuthorizationType: Optional[ConnectionAuthorizationType] = None
    Description: Optional[ConnectionDescription] = None
    Name: ConnectionName


class ListTargetsByRuleResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Targets: Optional[TargetList] = None


class PutTargetsRequest(BaseModel):
    EventBusName: Optional[EventBusNameOrArn] = None
    Rule: RuleName
    Targets: TargetList
